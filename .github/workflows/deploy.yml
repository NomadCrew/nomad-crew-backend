name: AWS Infrastructure Deployment

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:  # Allow manual triggering

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required to checkout the code

env:
  TF_LOG: INFO
  AWS_REGION: us-east-2
  ECR_REPOSITORY: nomadcrew
  TF_VERSION: 1.5.7

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::195275657852:role/NomadCrewProductionDeploymentRole' || 'arn:aws:iam::195275657852:role/NomadCrewStagingDeploymentRole' }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd terraform
          terraform validate -no-color

  plan:
    name: Plan Terraform Changes
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::195275657852:role/NomadCrewProductionDeploymentRole' || 'arn:aws:iam::195275657852:role/NomadCrewStagingDeploymentRole' }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init

      - name: Set Terraform Workspace
        run: |
          cd terraform
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            terraform workspace select production || terraform workspace new production
          else
            terraform workspace select staging || terraform workspace new staging
          fi

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -no-color -var="environment=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}" \
            -var="supabase_anon_key=${{ secrets.SUPABASE_ANON_KEY }}" \
            -var="supabase_url=${{ secrets.SUPABASE_URL }}" \
            -var="google_web_client_id=${{ secrets.GOOGLE_WEB_CLIENT_ID }}" \
            -var="google_places_api_key=${{ secrets.GOOGLE_PLACES_API_KEY }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="redis_password=${{ secrets.REDIS_PASSWORD }}" \
            -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}"
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image_tag: ${{ steps.build-image.outputs.image_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::195275657852:role/NomadCrewProductionDeploymentRole' || 'arn:aws:iam::195275657852:role/NomadCrewStagingDeploymentRole' }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          build-args: |
            SERVER_ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            GEOAPIFY_KEY=${{ secrets.GEOAPIFY_KEY }}
            PEXELS_API_KEY=${{ secrets.PEXELS_API_KEY }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}
            EMAIL_FROM_ADDRESS=${{ secrets.EMAIL_FROM_ADDRESS }}
            EMAIL_FROM_NAME=${{ secrets.EMAIL_FROM_NAME }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
        
      - name: Set image tag output
        run: |
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Infrastructure
    needs: [plan, build-and-push]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::195275657852:role/NomadCrewProductionDeploymentRole' || 'arn:aws:iam::195275657852:role/NomadCrewStagingDeploymentRole' }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600  # 1 hour in seconds

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Set Terraform Workspace
        run: |
          cd terraform
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            terraform workspace select production || terraform workspace new production
          else
            terraform workspace select staging || terraform workspace new staging
          fi

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="environment=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}" \
            -var="supabase_anon_key=${{ secrets.SUPABASE_ANON_KEY }}" \
            -var="supabase_url=${{ secrets.SUPABASE_URL }}" \
            -var="google_web_client_id=${{ secrets.GOOGLE_WEB_CLIENT_ID }}" \
            -var="google_places_api_key=${{ secrets.GOOGLE_PLACES_API_KEY }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="redis_password=${{ secrets.REDIS_PASSWORD }}" \
            -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" \
            -var="docker_image=${{ needs.build-and-push.outputs.image_tag }}"

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name nomad-crew-cluster-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: Deploy to Kubernetes
        run: |
          # Update the kubernetes deployment with the new image
          kubectl set image deployment/nomad-crew-frontend nomad-crew-frontend=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} --record
          # Wait for the deployment to complete
          kubectl rollout status deployment/nomad-crew-frontend

  verify-deployment:
    name: Verify Deployment
    needs: [deploy]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::195275657852:role/NomadCrewProductionDeploymentRole' || 'arn:aws:iam::195275657852:role/NomadCrewStagingDeploymentRole' }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check application health
        run: |
          # Get the ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, 'nomadcrew')].DNSName" --output text)
          
          # Wait for the application to be healthy
          echo "Waiting for application to be healthy at https://$ALB_DNS/health/liveness"
          
          # Try up to 10 times with 30 second intervals
          for i in {1..10}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$ALB_DNS/health/liveness)
            
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Application is healthy!"
              exit 0
            else
              echo "Attempt $i: Application is not healthy yet. Status: $HTTP_STATUS"
              sleep 30
            fi
          done
          
          echo "Application failed to become healthy after multiple attempts."
          exit 1