name: NomadCrew Backend CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE'
      - '**/*.png'
      - '**/*.jpg'
  pull_request:
    branches: [ develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE'
      - '**/*.png'
      - '**/*.jpg'
      
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  AWS_REGION: us-east-2
  # Explicitly set environment based on event type and branch
  ENVIRONMENT: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' ? 'staging' : 'production' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.run-tests.outcome == 'success' }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: nomadcrew_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
      
      # Add Go dependencies cache
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        id: run-tests
        env:
          DB_CONNECTION_STRING: postgresql://test:test@localhost:5432/nomadcrew_test
          JWT_SECRET_KEY: test_secret
        run: cd ./ && go test -v -race -coverprofile=coverage.txt -covermode=atomic -buildvcs=false ./...

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./coverage.txt

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    # Run in parallel with test job
    needs: []
    env:
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      
      # Add Go dependencies cache for security scanning
      - name: Cache Go modules for security scans
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-gosec-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gosec-
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          working-directory: ./
          args: ./...

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.base_ref == 'develop')
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
      
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build-args to optimize the Docker build
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          build-args: |
            SERVER_ENVIRONMENT=${{ env.ENVIRONMENT }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            GEOAPIFY_KEY=${{ secrets.GEOAPIFY_KEY }}
            PEXELS_API_KEY=${{ secrets.PEXELS_API_KEY }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}
            EMAIL_FROM_ADDRESS=${{ secrets.EMAIL_FROM_ADDRESS }}
            EMAIL_FROM_NAME=${{ secrets.EMAIL_FROM_NAME }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
            
      # Native GHA caching no longer needs manual cache movement

  deploy:
    needs: build-and-push
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.base_ref == 'develop')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ENVIRONMENT == 'production' && 'arn:aws:iam::195275657852:role/NomadCrewProductionDeploymentRole' || 'arn:aws:iam::195275657852:role/NomadCrewStagingDeploymentRole' }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name nomad-crew-cluster-${{ env.ENVIRONMENT }}
          
      - name: Update Kubernetes deployment
        run: |
          # Save current deployment state for potential rollback
          CURRENT_REVISION=$(kubectl get deployment/nomadcrew-backend -o jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}')
          echo "CURRENT_REVISION=$CURRENT_REVISION" >> $GITHUB_ENV
          
          # Update the backend deployment with the new image
          kubectl set image deployment/nomadcrew-backend nomadcrew-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} --record
          
          # Wait for rollout to complete
          kubectl rollout status deployment/nomadcrew-backend
          
      - name: Verify deployment health
        id: health-check
        run: |
          # Get service endpoint
          SERVICE_IP=$(kubectl get svc nomadcrew-backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Try up to 5 times with 10 second intervals
          for i in {1..5}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVICE_IP/health)
            
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Backend service is healthy!"
              exit 0
            else
              echo "Attempt $i: Backend service is not healthy yet. Status: $HTTP_STATUS"
              sleep 10
            fi
          done
          
          echo "Backend service failed to become healthy after multiple attempts."
          exit 1
          
      - name: Rollback on failure
        if: failure() && steps.health-check.outcome == 'failure'
        run: |
          echo "Health check failed, rolling back deployment..."
          kubectl rollout undo deployment/nomadcrew-backend
          kubectl rollout status deployment/nomadcrew-backend
          echo "Rollback completed. Please check the application logs for more details."