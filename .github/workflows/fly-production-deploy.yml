name: Fly.io Production Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: nomadcrew_test
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests
        id: run-tests
        env:
          DB_CONNECTION_STRING: postgresql://test:test@localhost:5432/nomadcrew_test
          JWT_SECRET_KEY: test_secret
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic -buildvcs=false ./...
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    env:
      GOFLAGS: "-buildvcs=false"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
  
  deploy:
    name: Deploy to Fly.io
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Check Fly.toml configuration
        run: |
          echo "Current fly.toml content:"
          cat fly.toml
      
      - name: Configure fly.toml
        run: |
          # Ensure the app name is correct
          sed -i "s/app = .*/app = 'nomadcrew'/" fly.toml
          cat fly.toml | grep "app ="
      
      - name: Deploy to Fly.io
        run: |
          echo "Deploying to production"
          flyctl deploy --remote-only \
            --build-arg VERSION=${GITHUB_SHA::8} \
            --build-arg SERVER_ENVIRONMENT=production \
            --build-arg RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}" \
            --build-arg JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --build-arg REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            --build-arg SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}" \
            --build-arg SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_KEY }}" \
            --build-arg SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            --build-arg SUPABASE_JWT_SECRET="${{ secrets.SUPABASE_JWT_SECRET }}" \
            --build-arg EMAIL_FROM_ADDRESS="${{ secrets.EMAIL_FROM_ADDRESS }}" \
            --build-arg EMAIL_FROM_NAME="${{ secrets.EMAIL_FROM_NAME }}" \
            --build-arg FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
            --build-arg ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS }}" \
            --build-arg GEOAPIFY_KEY="${{ secrets.GEOAPIFY_KEY }}" \
            --build-arg PEXELS_API_KEY="${{ secrets.PEXELS_API_KEY }}"
      
      - name: Set Environment Variables
        run: |
          echo "Setting environment variables for production"
          
          # Set secrets without validation (they are validated by the application)
          flyctl secrets set \
            JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DATABASE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_HOST="${{ secrets.DB_HOST }}" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            REDIS_ADDRESS="${{ secrets.REDIS_ADDRESS }}" \
            SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}" \
            SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_KEY }}" \
            SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            SUPABASE_JWT_SECRET="${{ secrets.SUPABASE_JWT_SECRET }}" \
            EMAIL_FROM_ADDRESS="${{ secrets.EMAIL_FROM_ADDRESS }}" \
            EMAIL_FROM_NAME="${{ secrets.EMAIL_FROM_NAME }}" \
            FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
            ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS }}" \
            GEOAPIFY_KEY="${{ secrets.GEOAPIFY_KEY }}" \
            PEXELS_API_KEY="${{ secrets.PEXELS_API_KEY }}" \
            RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}" \
            SERVER_ENVIRONMENT="production"
      
      - name: Check Deployment Status
        run: |
          echo "Checking deployment status"
          flyctl status