name: Reusable Golang CI/CD Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment to deploy to (staging or production)'
      aws_region:
        required: true
        type: string
        description: 'AWS region'
      image_name:
        required: true
        type: string
        description: 'Docker image name'
      registry:
        required: true
        type: string
        description: 'Container registry (e.g., ghcr.io)'
      role_arn:
        required: true
        type: string
        description: 'AWS IAM role ARN to assume'
      cluster_name:
        required: true
        type: string
        description: 'EKS cluster name'
      deployment_name:
        required: true
        type: string
        description: 'Kubernetes deployment name'
    secrets:
      GH_PAT:
        required: true
      JWT_SECRET_KEY:
        required: true
      DB_PASSWORD:
        required: true
      REDIS_PASSWORD:
        required: true
      RESEND_API_KEY:
        required: false
      GEOAPIFY_KEY:
        required: false
      PEXELS_API_KEY:
        required: false
      SUPABASE_ANON_KEY:
        required: true
      SUPABASE_SERVICE_KEY:
        required: false
      SUPABASE_URL:
        required: true
      SUPABASE_JWT_SECRET:
        required: false
      EMAIL_FROM_ADDRESS:
        required: false
      EMAIL_FROM_NAME:
        required: false
      FRONTEND_URL:
        required: false
      ALLOWED_ORIGINS:
        required: false

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.run-tests.outcome == 'success' }}
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: nomadcrew_test
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests
        id: run-tests
        env:
          DB_CONNECTION_STRING: postgresql://test:test@localhost:5432/nomadcrew_test
          JWT_SECRET_KEY: test_secret
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic -buildvcs=false ./...
      
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./coverage.txt

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    env:
      GOFLAGS: "-buildvcs=false"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [test, security-scan]
    env:
      # Set these environment variables to make sure they're available for debugging
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - id: meta
        name: Extract metadata for Docker
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=sha,format=long
            type=raw,value=latest,enable=${{ inputs.environment == 'production' }}
            type=raw,value=${{ inputs.environment }},enable=${{ inputs.environment != 'production' }}
      
      - name: Create .env file for build
        run: |
          cat > .env <<EOL
          SERVER_ENVIRONMENT=${{ inputs.environment }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          GEOAPIFY_KEY=${{ secrets.GEOAPIFY_KEY }}
          PEXELS_API_KEY=${{ secrets.PEXELS_API_KEY }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}
          EMAIL_FROM_ADDRESS=${{ secrets.EMAIL_FROM_ADDRESS }}
          EMAIL_FROM_NAME=${{ secrets.EMAIL_FROM_NAME }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
          EOL
          
          # Debug: Check if file exists and has content (without revealing secrets)
          if [ -s .env ]; then
            echo "✅ .env file created successfully"
            echo "Number of lines: $(wc -l < .env)"
          else
            echo "❌ .env file creation failed"
          fi
          
      # Add debug steps to verify environment variables are set
      - name: Debug environment variables
        run: |
          if [ -n "$JWT_SECRET_KEY" ]; then
            echo "JWT_SECRET_KEY is set and not empty"
          else
            echo "WARNING: JWT_SECRET_KEY is not set or empty"
          fi
          
          if [ -n "$DB_PASSWORD" ]; then
            echo "DB_PASSWORD is set and not empty"
          else
            echo "WARNING: DB_PASSWORD is not set or empty"
          fi
          
          if [ -n "$REDIS_PASSWORD" ]; then
            echo "REDIS_PASSWORD is set and not empty"
          else
            echo "WARNING: REDIS_PASSWORD is not set or empty"
          fi
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SERVER_ENVIRONMENT=${{ inputs.environment }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            GEOAPIFY_KEY=${{ secrets.GEOAPIFY_KEY }}
            PEXELS_API_KEY=${{ secrets.PEXELS_API_KEY }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}
            EMAIL_FROM_ADDRESS=${{ secrets.EMAIL_FROM_ADDRESS }}
            EMAIL_FROM_NAME=${{ secrets.EMAIL_FROM_NAME }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
            AWS_SECRETS_PATH=/nomadcrew/${{ inputs.environment }}/secrets

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_arn }}
          aws-region: ${{ inputs.aws_region }}
      
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ inputs.aws_region }} --name ${{ inputs.cluster_name }}
      
      - name: Update Kubernetes deployment
        id: deploy
        run: |
          # Store current revision for potential rollback
          CURRENT_REVISION=$(kubectl get deployment/${{ inputs.deployment_name }} -o jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}')
          echo "CURRENT_REVISION=$CURRENT_REVISION" >> $GITHUB_ENV
          
          # Deploy new version
          kubectl set image deployment/${{ inputs.deployment_name }} ${{ inputs.deployment_name }}=${{ inputs.registry }}/${{ inputs.image_name }}:sha-${{ github.sha }} --record
          kubectl rollout status deployment/${{ inputs.deployment_name }}
      
      - name: Verify deployment health
        id: health-check
        run: |
          SERVICE_IP=$(kubectl get svc ${{ inputs.deployment_name }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Try health check up to 5 times
          for i in {1..5}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVICE_IP/health)
            
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Backend service is healthy!"
              exit 0
            else
              echo "Attempt $i: Backend service is not healthy yet. Status: $HTTP_STATUS"
              sleep 10
            fi
          done
          
          echo "Backend service failed to become healthy after multiple attempts."
          exit 1
      
      - name: Rollback on failure
        if: failure() && steps.health-check.outcome == 'failure'
        run: |
          echo "Health check failed, rolling back deployment..."
          kubectl rollout undo deployment/${{ inputs.deployment_name }} --to-revision=$CURRENT_REVISION
          kubectl rollout status deployment/${{ inputs.deployment_name }}
          echo "Rollback completed. Please check the application logs for more details."