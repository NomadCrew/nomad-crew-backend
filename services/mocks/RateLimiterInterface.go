// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRateLimiter is an autogenerated mock type for the RateLimiterInterface type
type MockRateLimiter struct {
	mock.Mock
}

// CheckLimit provides a mock function with given fields: ctx, key, limit, duration
func (_m *MockRateLimiter) CheckLimit(ctx context.Context, key string, limit int, duration time.Duration) (bool, time.Duration, error) {
	ret := _m.Called(ctx, key, limit, duration)

	if len(ret) == 0 {
		panic("no return value specified for CheckLimit")
	}

	var r0 bool
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Duration) (bool, time.Duration, error)); ok {
		return rf(ctx, key, limit, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Duration) bool); ok {
		r0 = rf(ctx, key, limit, duration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, time.Duration) time.Duration); ok {
		r1 = rf(ctx, key, limit, duration)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, time.Duration) error); ok {
		r2 = rf(ctx, key, limit, duration)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockRateLimiter creates a new instance of MockRateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimiter {
	mock := &MockRateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
