// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/NomadCrew/nomad-crew-backend/types"
)

// TodoStore is an autogenerated mock type for the TodoStore type
type TodoStore struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: ctx, todo
func (_m *TodoStore) CreateTodo(ctx context.Context, todo *types.Todo) (string, error) {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Todo) (string, error)); ok {
		return rf(ctx, todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Todo) string); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Todo) error); ok {
		r1 = rf(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: ctx, id
func (_m *TodoStore) DeleteTodo(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodo provides a mock function with given fields: ctx, id
func (_m *TodoStore) GetTodo(ctx context.Context, id string) (*types.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTodo")
	}

	var r0 *types.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTodos provides a mock function with given fields: ctx, tripID
func (_m *TodoStore) ListTodos(ctx context.Context, tripID string) ([]*types.Todo, error) {
	ret := _m.Called(ctx, tripID)

	if len(ret) == 0 {
		panic("no return value specified for ListTodos")
	}

	var r0 []*types.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*types.Todo, error)); ok {
		return rf(ctx, tripID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Todo); ok {
		r0 = rf(ctx, tripID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tripID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: ctx, id, update
func (_m *TodoStore) UpdateTodo(ctx context.Context, id string, update *types.TodoUpdate) (*types.Todo, error) {
	ret := _m.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodo")
	}

	var r0 *types.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.TodoUpdate) (*types.Todo, error)); ok {
		return rf(ctx, id, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.TodoUpdate) *types.Todo); ok {
		r0 = rf(ctx, id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *types.TodoUpdate) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoStore creates a new instance of TodoStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoStore {
	mock := &TodoStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
