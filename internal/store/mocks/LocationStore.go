// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/NomadCrew/nomad-crew-backend/types"
)

// LocationStore is an autogenerated mock type for the LocationStore type
type LocationStore struct {
	mock.Mock
}

// CreateLocation provides a mock function with given fields: ctx, location
func (_m *LocationStore) CreateLocation(ctx context.Context, location *types.Location) (string, error) {
	ret := _m.Called(ctx, location)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocation")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Location) (string, error)); ok {
		return rf(ctx, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Location) string); ok {
		r0 = rf(ctx, location)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Location) error); ok {
		r1 = rf(ctx, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLocation provides a mock function with given fields: ctx, id
func (_m *LocationStore) DeleteLocation(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLocation provides a mock function with given fields: ctx, id
func (_m *LocationStore) GetLocation(ctx context.Context, id string) (*types.Location, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLocation")
	}

	var r0 *types.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Location, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Location); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTripMemberLocations provides a mock function with given fields: ctx, tripID
func (_m *LocationStore) ListTripMemberLocations(ctx context.Context, tripID string) ([]*types.MemberLocation, error) {
	ret := _m.Called(ctx, tripID)

	if len(ret) == 0 {
		panic("no return value specified for ListTripMemberLocations")
	}

	var r0 []*types.MemberLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*types.MemberLocation, error)); ok {
		return rf(ctx, tripID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.MemberLocation); ok {
		r0 = rf(ctx, tripID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.MemberLocation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tripID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessOfflineLocations provides a mock function with given fields: ctx, userID, tripID
func (_m *LocationStore) ProcessOfflineLocations(ctx context.Context, userID string, tripID string) error {
	ret := _m.Called(ctx, userID, tripID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessOfflineLocations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, tripID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveOfflineLocations provides a mock function with given fields: ctx, userID, tripID, updates, deviceID
func (_m *LocationStore) SaveOfflineLocations(ctx context.Context, userID string, tripID string, updates []types.LocationUpdate, deviceID string) error {
	ret := _m.Called(ctx, userID, tripID, updates, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for SaveOfflineLocations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []types.LocationUpdate, string) error); ok {
		r0 = rf(ctx, userID, tripID, updates, deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLocation provides a mock function with given fields: ctx, id, update
func (_m *LocationStore) UpdateLocation(ctx context.Context, id string, update *types.LocationUpdate) (*types.Location, error) {
	ret := _m.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocation")
	}

	var r0 *types.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.LocationUpdate) (*types.Location, error)); ok {
		return rf(ctx, id, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.LocationUpdate) *types.Location); ok {
		r0 = rf(ctx, id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *types.LocationUpdate) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocationStore creates a new instance of LocationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocationStore {
	mock := &LocationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
