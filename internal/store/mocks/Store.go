// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	store "github.com/NomadCrew/nomad-crew-backend/internal/store"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *Store) BeginTx(ctx context.Context) (store.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (store.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) store.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chat provides a mock function with no fields
func (_m *Store) Chat() store.ChatStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 store.ChatStore
	if rf, ok := ret.Get(0).(func() store.ChatStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ChatStore)
		}
	}

	return r0
}

// Location provides a mock function with no fields
func (_m *Store) Location() store.LocationStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Location")
	}

	var r0 store.LocationStore
	if rf, ok := ret.Get(0).(func() store.LocationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.LocationStore)
		}
	}

	return r0
}

// Todo provides a mock function with no fields
func (_m *Store) Todo() store.TodoStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Todo")
	}

	var r0 store.TodoStore
	if rf, ok := ret.Get(0).(func() store.TodoStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TodoStore)
		}
	}

	return r0
}

// Trip provides a mock function with no fields
func (_m *Store) Trip() store.TripStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trip")
	}

	var r0 store.TripStore
	if rf, ok := ret.Get(0).(func() store.TripStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TripStore)
		}
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
