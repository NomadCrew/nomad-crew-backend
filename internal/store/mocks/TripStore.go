// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	pgxpool "github.com/jackc/pgx/v4/pgxpool"
	mock "github.com/stretchr/testify/mock"

	types "github.com/NomadCrew/nomad-crew-backend/types"
)

// TripStore is an autogenerated mock type for the TripStore type
type TripStore struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: ctx, membership
func (_m *TripStore) AddMember(ctx context.Context, membership *types.TripMembership) error {
	ret := _m.Called(ctx, membership)

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.TripMembership) error); ok {
		r0 = rf(ctx, membership)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeginTx provides a mock function with given fields: ctx
func (_m *TripStore) BeginTx(ctx context.Context) (types.DatabaseTransaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 types.DatabaseTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.DatabaseTransaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.DatabaseTransaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.DatabaseTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with no fields
func (_m *TripStore) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvitation provides a mock function with given fields: ctx, invitation
func (_m *TripStore) CreateInvitation(ctx context.Context, invitation *types.TripInvitation) error {
	ret := _m.Called(ctx, invitation)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.TripInvitation) error); ok {
		r0 = rf(ctx, invitation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTrip provides a mock function with given fields: ctx, trip
func (_m *TripStore) CreateTrip(ctx context.Context, trip types.Trip) (string, error) {
	ret := _m.Called(ctx, trip)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrip")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Trip) (string, error)); ok {
		return rf(ctx, trip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Trip) string); ok {
		r0 = rf(ctx, trip)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Trip) error); ok {
		r1 = rf(ctx, trip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitation provides a mock function with given fields: ctx, invitationID
func (_m *TripStore) GetInvitation(ctx context.Context, invitationID string) (*types.TripInvitation, error) {
	ret := _m.Called(ctx, invitationID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitation")
	}

	var r0 *types.TripInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.TripInvitation, error)); ok {
		return rf(ctx, invitationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.TripInvitation); ok {
		r0 = rf(ctx, invitationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TripInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, invitationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationsByTripID provides a mock function with given fields: ctx, tripID
func (_m *TripStore) GetInvitationsByTripID(ctx context.Context, tripID string) ([]*types.TripInvitation, error) {
	ret := _m.Called(ctx, tripID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitationsByTripID")
	}

	var r0 []*types.TripInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*types.TripInvitation, error)); ok {
		return rf(ctx, tripID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.TripInvitation); ok {
		r0 = rf(ctx, tripID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.TripInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tripID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPool provides a mock function with no fields
func (_m *TripStore) GetPool() *pgxpool.Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 *pgxpool.Pool
	if rf, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}

	return r0
}

// GetTrip provides a mock function with given fields: ctx, id
func (_m *TripStore) GetTrip(ctx context.Context, id string) (*types.Trip, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTrip")
	}

	var r0 *types.Trip
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Trip, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Trip); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trip)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTripMembers provides a mock function with given fields: ctx, tripID
func (_m *TripStore) GetTripMembers(ctx context.Context, tripID string) ([]types.TripMembership, error) {
	ret := _m.Called(ctx, tripID)

	if len(ret) == 0 {
		panic("no return value specified for GetTripMembers")
	}

	var r0 []types.TripMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.TripMembership, error)); ok {
		return rf(ctx, tripID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.TripMembership); ok {
		r0 = rf(ctx, tripID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.TripMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tripID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRole provides a mock function with given fields: ctx, tripID, userID
func (_m *TripStore) GetUserRole(ctx context.Context, tripID string, userID string) (types.MemberRole, error) {
	ret := _m.Called(ctx, tripID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRole")
	}

	var r0 types.MemberRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (types.MemberRole, error)); ok {
		return rf(ctx, tripID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) types.MemberRole); ok {
		r0 = rf(ctx, tripID, userID)
	} else {
		r0 = ret.Get(0).(types.MemberRole)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tripID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserTrips provides a mock function with given fields: ctx, userID
func (_m *TripStore) ListUserTrips(ctx context.Context, userID string) ([]*types.Trip, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListUserTrips")
	}

	var r0 []*types.Trip
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*types.Trip, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Trip); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trip)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupUserByEmail provides a mock function with given fields: ctx, email
func (_m *TripStore) LookupUserByEmail(ctx context.Context, email string) (*types.SupabaseUser, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for LookupUserByEmail")
	}

	var r0 *types.SupabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.SupabaseUser, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.SupabaseUser); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SupabaseUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMember provides a mock function with given fields: ctx, tripID, userID
func (_m *TripStore) RemoveMember(ctx context.Context, tripID string, userID string) error {
	ret := _m.Called(ctx, tripID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tripID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with no fields
func (_m *TripStore) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchTrips provides a mock function with given fields: ctx, criteria
func (_m *TripStore) SearchTrips(ctx context.Context, criteria types.TripSearchCriteria) ([]*types.Trip, error) {
	ret := _m.Called(ctx, criteria)

	if len(ret) == 0 {
		panic("no return value specified for SearchTrips")
	}

	var r0 []*types.Trip
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.TripSearchCriteria) ([]*types.Trip, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.TripSearchCriteria) []*types.Trip); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trip)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.TripSearchCriteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteTrip provides a mock function with given fields: ctx, id
func (_m *TripStore) SoftDeleteTrip(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteTrip")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInvitationStatus provides a mock function with given fields: ctx, invitationID, status
func (_m *TripStore) UpdateInvitationStatus(ctx context.Context, invitationID string, status types.InvitationStatus) error {
	ret := _m.Called(ctx, invitationID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvitationStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.InvitationStatus) error); ok {
		r0 = rf(ctx, invitationID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemberRole provides a mock function with given fields: ctx, tripID, userID, role
func (_m *TripStore) UpdateMemberRole(ctx context.Context, tripID string, userID string, role types.MemberRole) error {
	ret := _m.Called(ctx, tripID, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, types.MemberRole) error); ok {
		r0 = rf(ctx, tripID, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTrip provides a mock function with given fields: ctx, id, update
func (_m *TripStore) UpdateTrip(ctx context.Context, id string, update types.TripUpdate) (*types.Trip, error) {
	ret := _m.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrip")
	}

	var r0 *types.Trip
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TripUpdate) (*types.Trip, error)); ok {
		return rf(ctx, id, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TripUpdate) *types.Trip); ok {
		r0 = rf(ctx, id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trip)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.TripUpdate) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTripStore creates a new instance of TripStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTripStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TripStore {
	mock := &TripStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
