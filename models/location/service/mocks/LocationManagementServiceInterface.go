// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/NomadCrew/nomad-crew-backend/types"
)

// MockLocationManagementService is an autogenerated mock type for the LocationManagementServiceInterface type
type MockLocationManagementService struct {
	mock.Mock
}

// GetTripMemberLocations provides a mock function with given fields: ctx, tripID, userID
func (_m *MockLocationManagementService) GetTripMemberLocations(ctx context.Context, tripID string, userID string) ([]types.MemberLocation, error) {
	ret := _m.Called(ctx, tripID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTripMemberLocations")
	}

	var r0 []types.MemberLocation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]types.MemberLocation, error)); ok {
		return rf(ctx, tripID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []types.MemberLocation); ok {
		r0 = rf(ctx, tripID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MemberLocation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tripID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLocation provides a mock function with given fields: ctx, userID, update
func (_m *MockLocationManagementService) UpdateLocation(ctx context.Context, userID string, update types.LocationUpdate) (*types.Location, error) {
	ret := _m.Called(ctx, userID, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocation")
	}

	var r0 *types.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.LocationUpdate) (*types.Location, error)); ok {
		return rf(ctx, userID, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.LocationUpdate) *types.Location); ok {
		r0 = rf(ctx, userID, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.LocationUpdate) error); ok {
		r1 = rf(ctx, userID, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockLocationManagementService creates a new instance of MockLocationManagementService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocationManagementService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocationManagementService {
	mock := &MockLocationManagementService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
