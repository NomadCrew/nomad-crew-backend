// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/NomadCrew/nomad-crew-backend/types"
	mock "github.com/stretchr/testify/mock"
)

// WeatherServiceInterface is an autogenerated mock type for the WeatherServiceInterface type
type WeatherServiceInterface struct {
	mock.Mock
}

// DecrementSubscribers provides a mock function with given fields: tripID
func (_m *WeatherServiceInterface) DecrementSubscribers(tripID string) {
	_m.Called(tripID)
}

// GetWeather provides a mock function with given fields: ctx, tripID
func (_m *WeatherServiceInterface) GetWeather(ctx context.Context, tripID string) (*types.WeatherInfo, error) {
	ret := _m.Called(ctx, tripID)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *types.WeatherInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.WeatherInfo, error)); ok {
		return rf(ctx, tripID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.WeatherInfo); ok {
		r0 = rf(ctx, tripID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.WeatherInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tripID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementSubscribers provides a mock function with given fields: tripID, dest
func (_m *WeatherServiceInterface) IncrementSubscribers(tripID string, dest types.Destination) {
	_m.Called(tripID, dest)
}

// StartWeatherUpdates provides a mock function with given fields: ctx, tripID, destination
func (_m *WeatherServiceInterface) StartWeatherUpdates(ctx context.Context, tripID string, destination types.Destination) {
	_m.Called(ctx, tripID, destination)
}

// TriggerImmediateUpdate provides a mock function with given fields: ctx, tripID, destination
func (_m *WeatherServiceInterface) TriggerImmediateUpdate(ctx context.Context, tripID string, destination types.Destination) {
	_m.Called(ctx, tripID, destination)
}

// NewWeatherServiceInterface creates a new instance of WeatherServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherServiceInterface {
	mock := &WeatherServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
