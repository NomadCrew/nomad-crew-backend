// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/NomadCrew/nomad-crew-backend/types"
	mock "github.com/stretchr/testify/mock"
)

// EventPublisher is an autogenerated mock type for the EventPublisher type
type EventPublisher struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, tripID, event
func (_m *EventPublisher) Publish(ctx context.Context, tripID string, event types.Event) error {
	ret := _m.Called(ctx, tripID, event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Event) error); ok {
		r0 = rf(ctx, tripID, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishBatch provides a mock function with given fields: ctx, tripID, events
func (_m *EventPublisher) PublishBatch(ctx context.Context, tripID string, events []types.Event) error {
	ret := _m.Called(ctx, tripID, events)

	if len(ret) == 0 {
		panic("no return value specified for PublishBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []types.Event) error); ok {
		r0 = rf(ctx, tripID, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, tripID, userID, filters
func (_m *EventPublisher) Subscribe(ctx context.Context, tripID string, userID string, filters ...types.EventType) (<-chan types.Event, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tripID, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan types.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...types.EventType) (<-chan types.Event, error)); ok {
		return rf(ctx, tripID, userID, filters...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...types.EventType) <-chan types.Event); ok {
		r0 = rf(ctx, tripID, userID, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan types.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...types.EventType) error); ok {
		r1 = rf(ctx, tripID, userID, filters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: ctx, tripID, userID
func (_m *EventPublisher) Unsubscribe(ctx context.Context, tripID string, userID string) error {
	ret := _m.Called(ctx, tripID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tripID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventPublisher creates a new instance of EventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventPublisher {
	mock := &EventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
