{
    "swagger": "2.0",
    "info": {
        "description": "NomadCrew RESTful API with authentication and WebSocket support",
        "title": "NomadCrew Backend API",
        "contact": {
            "name": "NomadCrew Team",
            "url": "https://nomadcrew.uk",
            "email": "support@nomadcrew.uk"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "host": "api.nomadcrew.uk",
    "basePath": "/v1",
    "paths": {
        "/health": {
            "get": {
                "description": "Provides detailed health information about all service dependencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Detailed health check",
                "responses": {
                    "200": {
                        "description": "Detailed health information",
                        "schema": {
                            "$ref": "#/definitions/types.HealthCheck"
                        }
                    }
                }
            }
        },
        "/health/liveness": {
            "get": {
                "description": "Simple endpoint that returns 200 OK if the service is running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Kubernetes liveness probe",
                "responses": {
                    "200": {
                        "description": "Service is alive"
                    }
                }
            }
        },
        "/health/readiness": {
            "get": {
                "description": "Checks if the service is ready to accept requests (DB and Redis connections working)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Kubernetes readiness probe",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "$ref": "#/definitions/types.HealthCheck"
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "schema": {
                            "$ref": "#/definitions/types.HealthCheck"
                        }
                    }
                }
            }
        },
        "/invitations/accept": {
            "post": {
                "security": [
                    {
                        "BearerAuth // User must be logged in to accept": []
                    }
                ],
                "description": "Allows a user to accept an invitation to join a trip using a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-invitations"
                ],
                "summary": "Accept a trip invitation",
                "parameters": [
                    {
                        "description": "Invitation token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AcceptInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully joined trip",
                        "schema": {
                            "$ref": "#/definitions/types.TripMembership"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User ID in token does not match logged-in user (if applicable)",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Invitation not found or already processed",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invitations/decline": {
            "post": {
                "security": [
                    {
                        "BearerAuth // User must be logged in to decline": []
                    }
                ],
                "description": "Allows a user to decline an invitation to join a trip using a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-invitations"
                ],
                "summary": "Decline a trip invitation",
                "parameters": [
                    {
                        "description": "Invitation token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DeclineInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully declined invitation"
                    },
                    "400": {
                        "description": "Bad request - Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated or token mismatch",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Invitation not found or already processed",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invitations/details": {
            "get": {
                "description": "Retrieves details about an invitation, such as the trip name and inviter, using the invitation token. Useful for UIs before acceptance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-invitations"
                ],
                "summary": "Get details of a specific invitation using a token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invitation Token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the invitation",
                        "schema": {
                            "$ref": "#/definitions/types.InvitationDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Invitation not found or token invalid",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invitations/join": {
            "get": {
                "description": "Validates an invitation token from a deep link and redirects the user or provides invitation details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-invitations"
                ],
                "summary": "Handle a deep link for a trip invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invitation token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirects to frontend with token or error"
                    },
                    "400": {
                        "description": "Bad request - Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Invitation not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the current user's location",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Update user location",
                "parameters": [
                    {
                        "description": "Location update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.LocationUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated location",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid location data",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves notifications for the authenticated user with pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get user notifications",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of notifications to return (default 20, max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status ('read' or 'unread')",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/docs.NotificationResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/read-all": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks all unread notifications as read for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Mark all notifications as read",
                "responses": {
                    "200": {
                        "description": "Returns the number of notifications marked as read",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{notificationId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific notification for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Delete a notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID (UUID)",
                        "name": "notificationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid Notification ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Notification does not belong to user)",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Notification Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{notificationId}/read": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks a specific notification as read for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Mark a notification as read",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID (UUID)",
                        "name": "notificationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid Notification ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Notification does not belong to user)",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Notification Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all trips that the current user is a member of",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "List user trips",
                "responses": {
                    "200": {
                        "description": "List of user's trips",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/docs.TripResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new trip with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "Create a new trip",
                "parameters": [
                    {
                        "description": "Trip creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.CreateTripRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created trip details",
                        "schema": {
                            "$ref": "#/definitions/docs.TripResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Searches for trips based on specified criteria in the request body. All criteria are optional.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "Search for trips",
                "parameters": [
                    {
                        "description": "Search criteria",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.TripSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of trips matching the criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/docs.TripResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid search criteria",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific trip",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "Get trip details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trip details",
                        "schema": {
                            "$ref": "#/definitions/docs.TripResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates specified fields of an existing trip. All fields in the request body are optional.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "Update trip details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.TripUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated trip details",
                        "schema": {
                            "$ref": "#/definitions/docs.TripResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or update data",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to update this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific trip by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "Delete a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID format",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to delete this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/chat/last-read": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the last read message timestamp for the current user in the trip's chat.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Update last read message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Last read message ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.ChatLastReadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated last read timestamp"
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Message or chat group not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/chat/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of members in the trip's primary chat group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "List chat members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of chat members",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.UserResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Chat group not found for the trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/chat/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves messages for a trip's chat with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "List chat messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of messages to return (default 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of chat messages with pagination info",
                        "schema": {
                            "$ref": "#/definitions/types.ChatMessagePaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a new message in a trip's chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Send chat message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message content",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ChatMessageCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created message details",
                        "schema": {
                            "$ref": "#/definitions/types.ChatMessage"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or message content",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/chat/messages/{messageId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the content of an existing message in a trip's chat. User must be the author.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Update chat message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID to update",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New message content",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.ChatMessageUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated message details",
                        "schema": {
                            "$ref": "#/definitions/types.ChatMessage"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or message ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip or not the message author",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Message not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a message from a trip's chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Delete chat message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with message",
                        "schema": {
                            "$ref": "#/definitions/docs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or message ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/chat/messages/{messageId}/reactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all reactions for a specific message in a trip's chat.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "List reactions for a message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of reactions for the message",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/docs.ChatMessageReactionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or message ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Message not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not implemented - This feature is not yet available",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a reaction to a message in a trip's chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Add reaction to message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reaction details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ChatMessageReactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with message",
                        "schema": {
                            "$ref": "#/definitions/docs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID, message ID, or reaction",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/chat/messages/{messageId}/reactions/{reactionType}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a reaction from a message in a trip's chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Remove reaction from message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reaction type",
                        "name": "reactionType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with message",
                        "schema": {
                            "$ref": "#/definitions/docs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID, message ID, or reaction type",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/details": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a trip's details along with its list of members.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "Get trip with members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trip details including members",
                        "schema": {
                            "$ref": "#/definitions/docs.TripWithMembersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to view this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/images": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of images associated with a specific trip.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips",
                    "images"
                ],
                "summary": "List trip images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of trip images",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/docs.ImageResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to view images for this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads an image for a specific trip.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips",
                    "images"
                ],
                "summary": "Upload a trip image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Image uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/docs.ImageUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - No file, invalid file type/size, or invalid trip ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to upload images for this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error - Upload failed",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/images/{imageId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific image associated with a trip.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips",
                    "images"
                ],
                "summary": "Delete a trip image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image ID to delete",
                        "name": "imageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Image deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to delete this image",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip or image not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/locations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the current locations of all members in a trip",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Get trip member locations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of member locations",
                        "schema": {
                            "$ref": "#/definitions/docs.MemberLocationListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid or missing trip ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of a specific trip (e.g., PLANNING, ACTIVE, COMPLETED, CANCELLED).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips"
                ],
                "summary": "Update trip status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status for the trip",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.UpdateTripStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated trip status",
                        "schema": {
                            "$ref": "#/definitions/docs.TripStatusUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or status value",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to update this trip's status, or invalid status transition",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/todos": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of todo items associated with the specified trip, with pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "List todo items for a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return (default 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of todo items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/docs.TodoResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid Trip ID or pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to view todos for this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new todo item associated with the specified trip.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Create a new todo item for a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Todo details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.TodoCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created todo item",
                        "schema": {
                            "$ref": "#/definitions/docs.TodoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input data or missing Trip ID",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to create todos for this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/todos/{todoID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details for a specific todo item.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Get a specific todo item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Todo ID to retrieve",
                        "name": "todoID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the todo item",
                        "schema": {
                            "$ref": "#/definitions/docs.TodoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid IDs",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to view this todo",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Todo item not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the text and/or status of an existing todo item.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Update an existing todo item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Todo ID to update",
                        "name": "todoID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.TodoUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated todo item",
                        "schema": {
                            "$ref": "#/definitions/docs.TodoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input data or IDs",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to update this todo",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Todo item not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific todo item.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Delete a todo item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Todo ID to delete",
                        "name": "todoID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Todo item deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/docs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid IDs",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to delete this todo",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Todo item not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{id}/weather/trigger-update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually triggers a weather data update for the specified trip if conditions are met (e.g., trip is active or planning).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips",
                    "weather"
                ],
                "summary": "Trigger weather update for a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Weather update triggered successfully or already up-to-date",
                        "schema": {
                            "$ref": "#/definitions/docs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or conditions not met for update (e.g. trip completed)",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to trigger weather updates for this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripID}/ws": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upgrades HTTP connection to WebSocket for real-time trip chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket",
                    "chat"
                ],
                "summary": "Establish trip chat WebSocket connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols to WebSocket"
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripId}/chat/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of chat messages for a specific trip.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-chat"
                ],
                "summary": "List messages for a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Timestamp to fetch messages before (ISO 8601)",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of messages to fetch (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of chat messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ChatMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripId}/chat/read": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the timestamp of the last message read by the user in a specific trip's chat.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-chat"
                ],
                "summary": "Update user's last read message in a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Last read message ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChatLastReadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated last read timestamp",
                        "schema": {
                            "$ref": "#/definitions/docs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip or Message not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripId}/invitations": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invites a user by email to join a specific trip with a given role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-invitations"
                ],
                "summary": "Invite a user to a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invitation details (email, role)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.InviteMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created invitation",
                        "schema": {
                            "$ref": "#/definitions/types.TripInvitation"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or user already member/invited",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission to invite",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripId}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all members for a specific trip, including their profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-members"
                ],
                "summary": "Get all members of a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of trip members with profile information",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/docs.TripMemberDetailResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a user as a member to a specific trip with a given role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-members"
                ],
                "summary": "Add a member to a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.AddMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added member",
                        "schema": {
                            "$ref": "#/definitions/docs.TripMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or user already member",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission to add members",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip or User not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripId}/members/{userId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a user from a specific trip",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-members"
                ],
                "summary": "Remove a member from a trip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID of the member to remove",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully removed member"
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission to remove members",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip or User not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripId}/members/{userId}/role": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the role of an existing member in a specific trip",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trips-members"
                ],
                "summary": "Update a trip member's role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID of the member to update",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.UpdateMemberRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated member's role",
                        "schema": {
                            "$ref": "#/definitions/docs.TripMemberResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission to update roles",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Trip, User, or Membership not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/trips/{tripId}/ws/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establishes a WebSocket connection to stream real-time events for a trip (chat, updates, etc.).",
                "tags": [
                    "trips-chat websocket"
                ],
                "summary": "WebSocket stream for trip events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trip ID",
                        "name": "tripId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols"
                    },
                    "400": {
                        "description": "Bad request - Invalid trip ID or user not authorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not a member of this trip",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error - Failed to upgrade connection",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Pagination offset (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination limit (default 20, max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users with pagination info",
                        "schema": {
                            "$ref": "#/definitions/docs.UserListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserProfile"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - No authenticated user",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a user profile by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserProfile"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - User not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates fields for a specified user. Only admin or the user themselves can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserProfile"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid user ID or request body",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to update this profile",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - User not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/preferences": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the preferences for a specified user. Only admin or the user themselves can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user preferences",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID whose preferences to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User preferences map",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.UserPreferencesRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Preferences updated successfully"
                    },
                    "400": {
                        "description": "Bad request - Invalid user ID or preferences format",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized to update these preferences",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - User not found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upgrades HTTP connection to WebSocket for real-time communication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "Establish WebSocket connection",
                "responses": {
                    "101": {
                        "description": "Switching Protocols to WebSocket"
                    },
                    "401": {
                        "description": "Unauthorized - User not logged in",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests - Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "docs.AddMemberRequest": {
            "description": "Request body for adding a member to a trip.",
            "type": "object",
            "required": [
                "role",
                "userId"
            ],
            "properties": {
                "role": {
                    "description": "Role to assign to the new member (e.g., MEMBER, ADMIN, OWNER)",
                    "type": "string",
                    "example": "MEMBER"
                },
                "userId": {
                    "description": "User ID of the member to add",
                    "type": "string",
                    "example": "user-uuid-abc"
                }
            }
        },
        "docs.ChatLastReadRequest": {
            "description": "Request to update the last read message ID for the user in a trip's chat.",
            "type": "object",
            "required": [
                "lastReadMessageId"
            ],
            "properties": {
                "lastReadMessageId": {
                    "type": "string",
                    "example": "message-uuid-xyz"
                }
            }
        },
        "docs.ChatMessageReactionResponse": {
            "description": "Detailed information about a chat message reaction.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-10-27T10:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "reaction-uuid-123"
                },
                "messageId": {
                    "type": "string",
                    "example": "message-uuid-456"
                },
                "reaction": {
                    "description": "The emoji character(s)",
                    "type": "string",
                    "example": "👍"
                },
                "userId": {
                    "type": "string",
                    "example": "user-uuid-789"
                }
            }
        },
        "docs.ChatMessageUpdateRequest": {
            "description": "Request body for updating a chat message.",
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Updated message content here."
                }
            }
        },
        "docs.Coordinates": {
            "description": "Geographic coordinates",
            "type": "object",
            "properties": {
                "lat": {
                    "description": "Latitude",
                    "type": "number",
                    "example": 48.8566
                },
                "lng": {
                    "description": "Longitude",
                    "type": "number",
                    "example": 2.3522
                }
            }
        },
        "docs.CreateTripRequest": {
            "description": "Trip creation information",
            "type": "object",
            "required": [
                "destination",
                "endDate",
                "name",
                "startDate"
            ],
            "properties": {
                "description": {
                    "description": "Trip description",
                    "type": "string",
                    "example": "A relaxing trip to the beach"
                },
                "destination": {
                    "description": "Trip destination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/docs.DestinationInfo"
                        }
                    ]
                },
                "endDate": {
                    "description": "Trip end date",
                    "type": "string",
                    "example": "2024-07-10T00:00:00Z"
                },
                "name": {
                    "description": "The trip name",
                    "type": "string",
                    "example": "Summer Vacation"
                },
                "startDate": {
                    "description": "Trip start date",
                    "type": "string",
                    "example": "2024-07-01T00:00:00Z"
                },
                "status": {
                    "description": "Trip status (PLANNING, ACTIVE, COMPLETED, CANCELLED)\nDefaults to PLANNING if not provided.",
                    "type": "string",
                    "example": "PLANNING"
                }
            }
        },
        "docs.DestinationInfo": {
            "description": "Destination information",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Destination address",
                    "type": "string",
                    "example": "Paris, France"
                },
                "coordinates": {
                    "description": "Coordinates information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/docs.Coordinates"
                        }
                    ]
                },
                "placeId": {
                    "description": "Google Maps place ID",
                    "type": "string",
                    "example": "ChIJD7fiBh9u5kcRYJSMaMOCCwQ"
                }
            }
        },
        "docs.ErrorResponse": {
            "description": "Error information",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "error": {
                    "description": "Detailed error information",
                    "type": "string",
                    "example": "Field 'name' is required"
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "docs.ImageResponse": {
            "description": "Image details",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "image-uuid-123"
                },
                "uploadedAt": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                }
            }
        },
        "docs.ImageUploadResponse": {
            "description": "Response after successful image upload",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "image-uuid-123"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                }
            }
        },
        "docs.MemberLocationListResponse": {
            "description": "A list of locations for trip members.",
            "type": "object",
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.MemberLocation"
                    }
                }
            }
        },
        "docs.NotificationResponse": {
            "description": "Notification information",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the notification was created",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "id": {
                    "description": "The notification ID",
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                },
                "message": {
                    "description": "The notification message",
                    "type": "string",
                    "example": "You've been invited to join a trip to Paris"
                },
                "metadata": {
                    "description": "Additional data related to the notification (if any)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "read": {
                    "description": "Whether the notification has been read",
                    "type": "boolean",
                    "example": false
                },
                "title": {
                    "description": "The notification title",
                    "type": "string",
                    "example": "New Trip Invitation"
                },
                "type": {
                    "description": "The notification type",
                    "type": "string",
                    "example": "TRIP_INVITATION"
                },
                "userId": {
                    "description": "The user ID this notification belongs to",
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                }
            }
        },
        "docs.StatusResponse": {
            "description": "Generic status message response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "docs.TodoCreateRequest": {
            "description": "Request body for creating a new todo. TripID is taken from the path.",
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "text": {
                    "type": "string",
                    "example": "Buy groceries"
                }
            }
        },
        "docs.TodoResponse": {
            "description": "Detailed information about a todo item.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-10-26T10:00:00Z"
                },
                "createdBy": {
                    "type": "string",
                    "example": "user-uuid-789"
                },
                "id": {
                    "type": "string",
                    "example": "todo-uuid-123"
                },
                "status": {
                    "description": "Status of the todo item (e.g., COMPLETE, INCOMPLETE)",
                    "type": "string",
                    "example": "INCOMPLETE"
                },
                "text": {
                    "type": "string",
                    "example": "Buy groceries"
                },
                "tripId": {
                    "type": "string",
                    "example": "trip-uuid-456"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-10-26T10:05:00Z"
                }
            }
        },
        "docs.TodoUpdateRequest": {
            "description": "Fields for updating a todo. All fields are optional.",
            "type": "object",
            "properties": {
                "status": {
                    "description": "New status for the todo item (e.g., COMPLETE, INCOMPLETE)",
                    "type": "string",
                    "example": "COMPLETE"
                },
                "text": {
                    "description": "New text for the todo item",
                    "type": "string",
                    "example": "Buy milk and eggs"
                }
            }
        },
        "docs.TripMemberDetailResponse": {
            "description": "Detailed information about a trip member, including their membership details and user profile.",
            "type": "object",
            "properties": {
                "membership": {
                    "description": "Reusing existing docs.TripMemberResponse for membership details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/docs.TripMemberResponse"
                        }
                    ]
                },
                "user": {
                    "description": "Assuming types.UserResponse is suitable for direct use here",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.UserResponse"
                        }
                    ]
                }
            }
        },
        "docs.TripMemberResponse": {
            "description": "Detailed information about a trip member",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "membership-uuid-123"
                },
                "role": {
                    "description": "Role of the member in the trip (e.g., OWNER, MEMBER, ADMIN)",
                    "type": "string",
                    "example": "MEMBER"
                },
                "status": {
                    "description": "Status of the membership (e.g., ACTIVE, INACTIVE, INVITED)",
                    "type": "string",
                    "example": "ACTIVE"
                },
                "tripId": {
                    "type": "string",
                    "example": "trip-uuid-456"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2023-01-01T11:00:00Z"
                },
                "userId": {
                    "type": "string",
                    "example": "user-uuid-789"
                }
            }
        },
        "docs.TripResponse": {
            "description": "Trip information",
            "type": "object",
            "properties": {
                "backgroundImageUrl": {
                    "description": "URL to trip background image",
                    "type": "string",
                    "example": "https://example.com/images/paris.jpg"
                },
                "createdAt": {
                    "description": "Trip creation time",
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "createdBy": {
                    "description": "ID of user who created the trip",
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                },
                "description": {
                    "description": "Trip description",
                    "type": "string",
                    "example": "A wonderful week in Paris"
                },
                "destination": {
                    "description": "Trip destination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/docs.DestinationInfo"
                        }
                    ]
                },
                "endDate": {
                    "description": "Trip end date",
                    "type": "string",
                    "example": "2023-06-07T00:00:00Z"
                },
                "id": {
                    "description": "The trip ID",
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                },
                "name": {
                    "description": "The trip name",
                    "type": "string",
                    "example": "Trip to Paris"
                },
                "startDate": {
                    "description": "Trip start date",
                    "type": "string",
                    "example": "2023-06-01T00:00:00Z"
                },
                "status": {
                    "description": "Trip status (PLANNING, ACTIVE, COMPLETED, CANCELLED)",
                    "type": "string",
                    "example": "PLANNING"
                },
                "updatedAt": {
                    "description": "Trip last update time",
                    "type": "string",
                    "example": "2023-01-02T00:00:00Z"
                }
            }
        },
        "docs.TripSearchRequest": {
            "description": "Criteria for searching trips. All fields are optional.",
            "type": "object",
            "properties": {
                "destination": {
                    "description": "Optional: Filter by destination (e.g., address, place name)",
                    "type": "string",
                    "example": "Paris"
                },
                "endDate": {
                    "description": "Optional: Filter by exact end date",
                    "type": "string",
                    "example": "2024-08-10T00:00:00Z"
                },
                "limit": {
                    "description": "Optional: Limit number of results",
                    "type": "integer",
                    "example": 20
                },
                "offset": {
                    "description": "Optional: Offset for pagination",
                    "type": "integer",
                    "example": 0
                },
                "startDate": {
                    "description": "Optional: Filter by exact start date",
                    "type": "string",
                    "example": "2024-08-01T00:00:00Z"
                },
                "startDateFrom": {
                    "description": "Optional: Filter by start date range (from this date)",
                    "type": "string",
                    "example": "2024-08-01T00:00:00Z"
                },
                "startDateTo": {
                    "description": "Optional: Filter by start date range (to this date)",
                    "type": "string",
                    "example": "2024-08-31T00:00:00Z"
                },
                "userId": {
                    "description": "Optional: User ID to filter trips by (admin capability or specific use cases)",
                    "type": "string",
                    "example": "user-uuid-123"
                }
            }
        },
        "docs.TripStatusUpdateResponse": {
            "description": "Response after updating trip status",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Trip details might be omitted if refetch fails",
                    "allOf": [
                        {
                            "$ref": "#/definitions/docs.TripResponse"
                        }
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Trip status updated successfully"
                }
            }
        },
        "docs.TripUpdateRequest": {
            "description": "Updatable trip fields. All fields are optional.",
            "type": "object",
            "properties": {
                "description": {
                    "description": "New trip description",
                    "type": "string",
                    "example": "An even more relaxing trip"
                },
                "destination": {
                    "description": "New trip destination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/docs.DestinationInfo"
                        }
                    ]
                },
                "endDate": {
                    "description": "New trip end date",
                    "type": "string",
                    "example": "2024-07-11T00:00:00Z"
                },
                "name": {
                    "description": "The new trip name",
                    "type": "string",
                    "example": "Updated Summer Vacation"
                },
                "startDate": {
                    "description": "New trip start date",
                    "type": "string",
                    "example": "2024-07-02T00:00:00Z"
                },
                "status": {
                    "description": "New trip status (PLANNING, ACTIVE, COMPLETED, CANCELLED)",
                    "type": "string",
                    "example": "PLANNING"
                }
            }
        },
        "docs.TripWithMembersResponse": {
            "description": "Detailed trip information along with a list of its members",
            "type": "object",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs.TripMemberResponse"
                    }
                },
                "trip": {
                    "$ref": "#/definitions/docs.TripResponse"
                }
            }
        },
        "docs.UpdateMemberRoleRequest": {
            "description": "Request body for updating a trip member's role.",
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "description": "New role for the member (e.g., MEMBER, ADMIN, OWNER)",
                    "type": "string",
                    "example": "ADMIN"
                }
            }
        },
        "docs.UpdateTripStatusRequest": {
            "description": "Request body for updating trip status",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "The new trip status (e.g., PLANNING, ACTIVE, COMPLETED, CANCELLED)",
                    "type": "string",
                    "example": "ACTIVE"
                }
            }
        },
        "docs.UserListResponse": {
            "description": "A paginated list of user profiles.",
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 20
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UserProfile"
                    }
                }
            }
        },
        "docs.UserPreferencesRequest": {
            "description": "A map of preference keys to their values.",
            "type": "object",
            "additionalProperties": true
        },
        "docs.UserUpdateRequest": {
            "description": "Fields for updating a user profile. All fields are optional.",
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "Jonathan"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doer"
                },
                "profilePictureUrl": {
                    "type": "string",
                    "example": "https://example.com/new_avatar.png"
                },
                "username": {
                    "type": "string",
                    "example": "new.john.doe"
                }
            }
        },
        "github_com_NomadCrew_nomad-crew-backend_types.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "github_com_NomadCrew_nomad-crew-backend_types.UserResponse": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "description": "Changed from ProfilePicture to match Supabase",
                    "type": "string"
                },
                "displayName": {
                    "description": "Added for UI display purposes",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.AcceptInvitationRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.ChatLastReadRequest": {
            "type": "object",
            "required": [
                "lastReadMessageId"
            ],
            "properties": {
                "lastReadMessageId": {
                    "type": "string"
                }
            }
        },
        "handlers.DeclineInvitationRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.InviteMemberRequest": {
            "type": "object",
            "required": [
                "email",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/types.MemberRole"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "types.ChatMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "contentType": {
                    "description": "Added: e.g., \"text\", \"image_url\", \"system\"",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "groupId": {
                    "description": "Specific group within the trip, if applicable",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isDeleted": {
                    "type": "boolean"
                },
                "isEdited": {
                    "type": "boolean"
                },
                "reactions": {
                    "description": "Added",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChatMessageReaction"
                    }
                },
                "sender": {
                    "description": "Added for sender details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MessageSender"
                        }
                    ]
                },
                "tripId": {
                    "description": "Often the primary key for partitioning/lookup",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "types.ChatMessageCreateRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "tripId": {
                    "type": "string"
                }
            }
        },
        "types.ChatMessagePaginatedResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChatMessageWithUser"
                    }
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "types.ChatMessageReaction": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "messageId": {
                    "type": "string"
                },
                "reaction": {
                    "description": "The emoji character(s)",
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "types.ChatMessageReactionRequest": {
            "type": "object",
            "properties": {
                "reaction": {
                    "type": "string"
                }
            }
        },
        "types.ChatMessageWithUser": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/types.ChatMessage"
                },
                "user": {
                    "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.UserResponse"
                }
            }
        },
        "types.HealthCheck": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/types.HealthComponent"
                    }
                },
                "status": {
                    "$ref": "#/definitions/types.HealthStatus"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "types.HealthComponent": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.HealthStatus"
                }
            }
        },
        "types.HealthStatus": {
            "type": "string",
            "enum": [
                "UP",
                "DOWN",
                "DEGRADED"
            ],
            "x-enum-varnames": [
                "HealthStatusUp",
                "HealthStatusDown",
                "HealthStatusDegraded"
            ]
        },
        "types.InvitationDetailsResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "description": "Represents InviteeEmail",
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "inviter": {
                    "description": "Assumes UserResponse is defined",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_NomadCrew_nomad-crew-backend_types.UserResponse"
                        }
                    ]
                },
                "role": {
                    "$ref": "#/definitions/types.MemberRole"
                },
                "status": {
                    "$ref": "#/definitions/types.InvitationStatus"
                },
                "trip": {
                    "description": "Assumes TripBasicInfo will be defined",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.TripBasicInfo"
                        }
                    ]
                },
                "tripId": {
                    "type": "string"
                }
            }
        },
        "types.InvitationStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "ACCEPTED",
                "DECLINED"
            ],
            "x-enum-varnames": [
                "InvitationStatusPending",
                "InvitationStatusAccepted",
                "InvitationStatusDeclined"
            ]
        },
        "types.Location": {
            "type": "object",
            "properties": {
                "accuracy": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "string"
                },
                "tripId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "types.LocationUpdate": {
            "type": "object",
            "required": [
                "accuracy",
                "latitude",
                "longitude",
                "timestamp"
            ],
            "properties": {
                "accuracy": {
                    "type": "number"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "timestamp": {
                    "description": "Unix timestamp in milliseconds",
                    "type": "integer"
                }
            }
        },
        "types.MemberLocation": {
            "type": "object",
            "properties": {
                "accuracy": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "string"
                },
                "tripId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "userRole": {
                    "type": "string"
                }
            }
        },
        "types.MemberRole": {
            "type": "string",
            "enum": [
                "NONE",
                "OWNER",
                "MEMBER",
                "ADMIN"
            ],
            "x-enum-varnames": [
                "MemberRoleNone",
                "MemberRoleOwner",
                "MemberRoleMember",
                "MemberRoleAdmin"
            ]
        },
        "types.MembershipStatus": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "INACTIVE",
                "INVITED"
            ],
            "x-enum-varnames": [
                "MembershipStatusActive",
                "MembershipStatusInactive",
                "MembershipStatusInvited"
            ]
        },
        "types.MessageSender": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.TripBasicInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "types.TripInvitation": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "inviteeEmail": {
                    "type": "string"
                },
                "inviteeId": {
                    "description": "Optional, may be nil if user not in system yet",
                    "type": "string"
                },
                "inviterId": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/types.MemberRole"
                },
                "status": {
                    "$ref": "#/definitions/types.InvitationStatus"
                },
                "token": {
                    "description": "Changed to sql.NullString",
                    "allOf": [
                        {
                            "$ref": "#/definitions/sql.NullString"
                        }
                    ]
                },
                "tripId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.TripMembership": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/types.MemberRole"
                },
                "status": {
                    "$ref": "#/definitions/types.MembershipStatus"
                },
                "tripId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "types.UserProfile": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isOnline": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "lastSeenAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT token for authentication",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}